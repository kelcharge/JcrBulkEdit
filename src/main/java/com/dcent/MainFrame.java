package com.dcent;

import com.dcent.jcr.utils.JcrHelper;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.ValueFormatException;
import javax.jcr.lock.LockException;
import javax.jcr.nodetype.ConstraintViolationException;
import javax.jcr.version.VersionException;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kel
 */
public class MainFrame extends javax.swing.JFrame {
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Session session = null;
    private ArrayList<Integer> selection;
    private List<Node> nodes;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initializeAfterFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        propertyLabel = new javax.swing.JLabel();
        propertyNameText = new javax.swing.JTextField();
        valueLabel = new javax.swing.JLabel();
        valueText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodeTable = new javax.swing.JTable();
        updateLabel = new javax.swing.JLabel();
        updateText = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1042, 540));

        propertyLabel.setText("Property Name");

        propertyNameText.setText("sling:resourceType");
        propertyNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyNameTextActionPerformed(evt);
            }
        });

        valueLabel.setText("Value to Search For");

        valueText.setText("training/components/content/list");
        valueText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTextActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        nodeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Path", "Resource Type"
            }
        ));
        jScrollPane1.setViewportView(nodeTable);

        updateLabel.setText("Value to Update To");

        updateText.setText("training/components/content/list");

        updateButton.setText("Update All");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");
        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(propertyNameText)
                            .addComponent(propertyLabel)
                            .addComponent(valueLabel)
                            .addComponent(valueText, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(searchButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(updateLabel))
                    .addComponent(updateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(updateButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(propertyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(propertyNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(valueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton)
                        .addGap(25, 25, 25)
                        .addComponent(updateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void propertyNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_propertyNameTextActionPerformed

    private void valueTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueTextActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            if(session != null && session.isLive()) 
            {
                nodes = JcrHelper.getNodes(session, propertyNameText.getText(), valueText.getText());
                
                DefaultTableModel dtm = (DefaultTableModel)nodeTable.getModel();
                dtm.setRowCount(0);
                
                for(int i = 0; i < nodes.size(); i++) {
                    dtm.setRowCount(i+1);
                    nodeTable.setValueAt(nodes.get(i).getPath(), i, 0);
                    nodeTable.setValueAt(nodes.get(i).getProperty("sling:resourceType").getString(), i, 1);
                }
                nodeTable.setModel(dtm);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No active session.", "Connection Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "This will update every node listed in the table to the right.\nAre you sure you wish to continue?", "Update All Nodes", JOptionPane.OK_CANCEL_OPTION);

        if(showConfirmDialog == JOptionPane.OK_OPTION && !nodes.isEmpty() && nodes != null) {
            //update the property given based on the update text value
            ListIterator<Node> it = nodes.listIterator();
            while(it.hasNext()) {
                Node n = (Node)it.next();
                try {
                    n.setProperty(propertyNameText.getText(), updateText.getText());
                    session.save();
                } catch(VersionException e) {
                    System.out.println(e.getMessage());
                } catch(ValueFormatException | LockException | ConstraintViolationException e) {
                    System.out.println(e.getMessage());
                } catch(RepositoryException e) {
                    System.out.println(e.getMessage());
                }
            }
            try {
                Thread.sleep(5000);
                nodes = JcrHelper.getNodes(session, propertyNameText.getText(), updateText.getText());
                
                DefaultTableModel dtm = (DefaultTableModel)nodeTable.getModel();
                dtm.setRowCount(0);
                
                valueText.setText(updateText.getText());
                for(int i = 0; i < nodes.size(); i++) {
                    dtm.setRowCount(i+1);
                    nodeTable.setValueAt(nodes.get(i).getPath(), i, 0);
                    nodeTable.setValueAt(nodes.get(i).getProperty("sling:resourceType").getString(), i, 1);
                }
                nodeTable.setModel(dtm);
            } catch(Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
        
    }
    
    private void initializeAfterFrame() {
        JFrame frame = this;
        this.setTitle("JCR Bulk Property Editor");
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                try {
                    session = JcrHelper.getSession("http://localhost:4502/crx/server", "admin", "admin");
                } catch(RepositoryException ex) {
                    System.out.println(ex.getMessage());
                }
                
                //TODO
                //when nodes are updated selectively they should be removed from
                //the table instead of updating the query
                
                //add table selection listener
                ListSelectionModel lsm = nodeTable.getSelectionModel();
                selection = new ArrayList<>();
                lsm.addListSelectionListener((ListSelectionEvent e1) -> {
                    ListSelectionModel selectionModel = (ListSelectionModel) e1.getSource();
                    selection.clear();
                    /*
                    int firstIndex = e1.getFirstIndex();
                    int lastIndex = e1.getLastIndex();
                    boolean isAdjusting = e1.getValueIsAdjusting();
                    */
                    if (selectionModel.isSelectionEmpty()) {
                        //System.out.println(" <none>");
                    } else {
                        // Find out which indexes are selected.
                        int minIndex = selectionModel.getMinSelectionIndex();
                        int maxIndex = selectionModel.getMaxSelectionIndex();
                        for (int i = minIndex; i <= maxIndex; i++) {
                            if (selectionModel.isSelectedIndex(i)) {
                                selection.add(i);
                            }
                        }
                    }
                });
                nodeTable.setSelectionModel(lsm);

                //Add functionality to menu bar
                JMenuItem file = new JMenuItem("Reconnect");
                JMenuItem exit = new JMenuItem("Exit");
                file.addActionListener((ActionEvent e1) -> {
                    JOptionPane.showMessageDialog(frame, "Attempting to connect to JCR.");
                });
                exit.addActionListener((ActionEvent e1) -> {
                    if(session != null && session.isLive()) session.logout();
                    if(frame.isDisplayable()) {
                        frame.dispose();
                    }
                    System.exit(0);
                });
                fileMenu.add(file);
                fileMenu.add(exit);


                //Add click functionality to table
                final JPopupMenu popupMenu = new JPopupMenu();
                JMenuItem info = new JMenuItem("Info");
                JMenuItem update = new JMenuItem("Update");
                update.addActionListener((ActionEvent e1) -> {
                    if (!selection.isEmpty() && selection != null) {
                        selection.stream().map((i) -> nodes.get(i)).forEachOrdered((n) -> {
                            try {
                                n.setProperty(propertyNameText.getText(), updateText.getText());
                                session.save();
                            } catch(Exception ex) {
                                System.out.println(ex.getMessage());
                            }
                        });
                        try {
                            Thread.sleep(5000);
                            nodes = JcrHelper.getNodes(session, propertyNameText.getText(), updateText.getText());
                            valueText.setText(updateText.getText());
                            DefaultTableModel dtm = (DefaultTableModel)nodeTable.getModel();
                            dtm.setRowCount(0);
                            for (int x1 = 0; x1 < nodes.size(); x1++) {
                                dtm.setRowCount(x1 + 1);
                                nodeTable.setValueAt(nodes.get(x1).getPath(), x1, 0);
                                nodeTable.setValueAt(nodes.get(x1).getProperty("sling:resourceType").getString(), x1, 1);
                            }
                            nodeTable.setModel(dtm);
                        }catch(Exception ex) {
                            System.out.println(ex.getMessage());
                        }
                    } else {
                        //nothing is selected in the table
                    }
                });
                info.addActionListener((ActionEvent e1) -> {
                    String output = "";
                    if (!selection.isEmpty()) {
                        for (int x1 = 0; x1 < selection.size(); x1++) {
                            if (x1 < selection.size() - 1) {
                                output += selection.get(x1) + ", ";
                            } else {
                                output += selection.get(x1);
                            }
                        }
                    }
                    JOptionPane.showMessageDialog(frame, "The current indexes are: " + output);
                });
                popupMenu.add(info);
                popupMenu.add(update);
                nodeTable.setComponentPopupMenu(popupMenu);
                    
                
            }
            
            @Override
            public void windowClosing(WindowEvent e) {
                if(session != null && session.isLive()) session.logout();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTable nodeTable;
    private javax.swing.JLabel propertyLabel;
    private javax.swing.JTextField propertyNameText;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel updateLabel;
    private javax.swing.JTextField updateText;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueText;
    // End of variables declaration//GEN-END:variables
}
